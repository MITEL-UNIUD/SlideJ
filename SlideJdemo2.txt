/////////////////////////////////////////////////////////
// SlideJ Demo macro 2                                 //
//                                                     //
// It calculates IHC positivity, as a demo for SlideJ  //
// however do not trust it for real use!               //
// This variant sums up all tiles of a slide in a      //
// single result row.                                  //
// It works with more than one slide in the "In" folder//
/////////////////////////////////////////////////////////


// Quicker with this
now=getTime();
setBatchMode(true);

slide=slideData();
tile=getTitle;

col1=tile+"-(Colour_1)";
col2=tile+"-(Colour_2)";

run("Colour Deconvolution", "vectors=[H DAB] hide");
close();

maroon=0;
blue=0;

//if a new slide is started, create a new row. If not, read previous data
if (nResults>0) {
	previous=getVariable("file");
	if(slide[0]!=previous) {
		addVariable("file",slide[0]);
		setVariable("time",0);
		}
	else {
		maroon=getVariable("maroon");
		blue=getVariable("blue");
	}
}
else {
	addVariable("file", slide[0]);
	setVariable("time",0);
	}
	

//maroon
selectWindow(col2);
run("Smooth");
run("Smooth");
setAutoThreshold("Default");
run("Convert to Mask");


getStatistics(area, mean, min, max, std, histomaroon);
// create a second cell in the row with number of maroon pixels
setVariable("maroon",maroon+histomaroon[255]);


selectWindow(col1);
run("Smooth");
run("Smooth");
setAutoThreshold("Default");
run("Convert to Mask");

getStatistics(area, mean, min, max, std, histoblue);
// create a third cell in the row with number of blue pixels
setVariable("blue",blue+histoblue[255]);
// create a fourth cell in the row with positivity percentage
setVariable("percentage", 100*(histomaroon[255]+maroon)/(histomaroon[255]+histoblue[255]+maroon+blue));
close("*");

//record how much time has been spent for each slide;
setVariable("time",getTime()-now+getVariable("time"));

//To clean up memory
call("java.lang.System.gc");





/////////////////////////////////////////////////////////
// SlideJ Support functions                            //
/////////////////////////////////////////////////////////


// Returns an array containing original file name, series number, X and Y origin
// Call it before doing anything on the image
function slideData() {
	i1=indexOf(getTitle(),"_");
	i2=indexOf(getTitle(),"_",i1+1);
	i3=indexOf(getTitle(),"_",i2+1);
	i4=indexOf(getTitle(),".tif",i3+1);

	tile=substring(getTitle(),0,i1);
	series=substring(getTitle(),i1+1,i2);
	x=substring(getTitle(),i2+1,i3);
	y=substring(getTitle(),i3+1,i4);

	res=newArray(tile,series,x,y);
	return res;
}

// Sets a value for the named variable in the last result row
function setVariable(name, value) {
	setResult(name,nResults-1,value);
}

// Adds a new row and sets a value for the named variable
function addVariable(name, value) {
	setResult(name,nResults,value);
}

// Gets the value of the named variable in the last Results row
function getVariable(name) {
	res= getResultString(name,nResults-1);
	res1=parseInt(res);
	res2=parseFloat(res);
	if(!isNaN(res1)) return res1;
	else if(!isNaN(res2)) return res2;
	else return res;
}

